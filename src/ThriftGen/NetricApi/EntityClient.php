<?php
namespace NetricApi;

/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class EntityClient implements \NetricApi\EntityIf
{
    protected $input_ = null;
    protected $output_ = null;

    protected $seqid_ = 0;

    public function __construct($input, $output = null)
    {
        $this->input_ = $input;
        $this->output_ = $output ? $output : $input;
    }


    public function setEntitySeenBy($entityId, $userId, $accountId)
    {
        $this->send_setEntitySeenBy($entityId, $userId, $accountId);
        $this->recv_setEntitySeenBy();
    }

    public function send_setEntitySeenBy($entityId, $userId, $accountId)
    {
        $args = new \NetricApi\Entity_setEntitySeenBy_args();
        $args->entityId = $entityId;
        $args->userId = $userId;
        $args->accountId = $accountId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'setEntitySeenBy',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('setEntitySeenBy', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_setEntitySeenBy()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\NetricApi\Entity_setEntitySeenBy_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \NetricApi\Entity_setEntitySeenBy_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        return;
    }

    public function updateUserLastActive($userId, $accountId, $timestamp)
    {
        $this->send_updateUserLastActive($userId, $accountId, $timestamp);
        $this->recv_updateUserLastActive();
    }

    public function send_updateUserLastActive($userId, $accountId, $timestamp)
    {
        $args = new \NetricApi\Entity_updateUserLastActive_args();
        $args->userId = $userId;
        $args->accountId = $accountId;
        $args->timestamp = $timestamp;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'updateUserLastActive',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('updateUserLastActive', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_updateUserLastActive()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\NetricApi\Entity_updateUserLastActive_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \NetricApi\Entity_updateUserLastActive_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->error !== null) {
            throw $result->error;
        }
        if ($result->badRequest !== null) {
            throw $result->badRequest;
        }
        return;
    }

    public function getEntityDataById($entityId, $userId, $accountId)
    {
        $this->send_getEntityDataById($entityId, $userId, $accountId);
        return $this->recv_getEntityDataById();
    }

    public function send_getEntityDataById($entityId, $userId, $accountId)
    {
        $args = new \NetricApi\Entity_getEntityDataById_args();
        $args->entityId = $entityId;
        $args->userId = $userId;
        $args->accountId = $accountId;
        $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
        if ($bin_accel) {
            thrift_protocol_write_binary(
                $this->output_,
                'getEntityDataById',
                TMessageType::CALL,
                $args,
                $this->seqid_,
                $this->output_->isStrictWrite()
            );
        } else {
            $this->output_->writeMessageBegin('getEntityDataById', TMessageType::CALL, $this->seqid_);
            $args->write($this->output_);
            $this->output_->writeMessageEnd();
            $this->output_->getTransport()->flush();
        }
    }

    public function recv_getEntityDataById()
    {
        $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
        if ($bin_accel) {
            $result = thrift_protocol_read_binary(
                $this->input_,
                '\NetricApi\Entity_getEntityDataById_result',
                $this->input_->isStrictRead()
            );
        } else {
            $rseqid = 0;
            $fname = null;
            $mtype = 0;

            $this->input_->readMessageBegin($fname, $mtype, $rseqid);
            if ($mtype == TMessageType::EXCEPTION) {
                $x = new TApplicationException();
                $x->read($this->input_);
                $this->input_->readMessageEnd();
                throw $x;
            }
            $result = new \NetricApi\Entity_getEntityDataById_result();
            $result->read($this->input_);
            $this->input_->readMessageEnd();
        }
        if ($result->success !== null) {
            return $result->success;
        }
        if ($result->error !== null) {
            throw $result->error;
        }
        throw new \Exception("getEntityDataById failed: unknown result");
    }
}
